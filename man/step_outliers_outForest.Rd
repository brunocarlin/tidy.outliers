% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/outForest.R
\name{step_outliers_outForest}
\alias{step_outliers_outForest}
\alias{tidy.step_outliers_outForest}
\title{Calculate the \link[=outForest]{outForest package} outlier "score"}
\usage{
step_outliers_outForest(
  recipe,
  ...,
  role = NA,
  trained = FALSE,
  outlier_score = NULL,
  columns = NULL,
  name_mutate = ".outliers_outForest",
  options = list(formula = . ~ ., replace = c("pmm", "predictions", "NA", "no"), pmm.k =
    3, threshold = 3, max_n_outliers = Inf, max_prop_outliers = 1, min.node.size = 40,
    allow_predictions = FALSE, impute_multivariate = TRUE, impute_multivariate_control =
    list(pmm.k = 3, num.trees = 50, maxiter = 3L), seed = NULL, verbose = 0),
  outlier_score_function = mean,
  original_result = FALSE,
  skip = TRUE,
  id = rand_id("outliers_outForest")
)

\method{tidy}{step_outliers_outForest}(x, ...)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[recipes:selections]{selections()}} for more details.}

\item{role}{not defined for this function}

\item{trained}{A logical to indicate if the quantities for
preprocessing have been estimated.}

\item{outlier_score}{a placeholder for the exit of this function don't change}

\item{columns}{A character string of variable names that will
be populated (eventually) by the terms argument.}

\item{name_mutate}{the name of the generated column with outForest results}

\item{options}{a list with arguments to \link{outForest} function.}

\item{outlier_score_function}{a function to decide when there are multivariate outlier scores how to combine them, some examples would be sum or median}

\item{original_result}{an argument to return a tibble row with the original results of the function instead of an computed score}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[recipes:bake]{bake()}}? While all operations are baked
when \code{\link[recipes:prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A character string that is unique to this step to identify it.}

\item{x}{A \code{step_outliers_outForest} object.}
}
\value{
An updated version of \code{recipe} with the new step
added to the sequence of existing steps (if any), with the name on \code{name_mutate} and the probabilities calculated. For the
\code{tidy} method, a tibble with columns \code{index} (the row indexes of the tibble) and \code{outlier_score} (the scores).
}
\description{
\code{step_outliers_outForest} creates a \emph{specification} of a recipe
step that will calculate the outlier score using \link{outForest} from \code{outForest}, it internally handles missing data.
}
\details{
All columns in the data are sampled and returned by \code{\link[=juice]{juice()}}
and \code{\link[=bake]{bake()}}.

All columns used in this step must be numeric with no missing data.

When used in modeling, users should strongly consider using the
option \code{skip = TRUE} so that this operation is \emph{not}
conducted outside of the training set.
}
\examples{
library(recipes)
library(tidy.outliers)
rec <-
  recipe(mpg ~ ., data = mtcars) \%>\%
  step_outliers_outForest(all_numeric_predictors()) \%>\%
  prep(mtcars)

bake(rec, new_data = NULL)

tidy(rec, number = 1)

}
\concept{preprocessing}
\keyword{datagen}
